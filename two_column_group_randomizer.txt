import random
import tkinter as tk
from tkinter import messagebox
import os

class NameGroupRandomizer:
    def __init__(self, column1_names, column2_names):
        self.column1_names = column1_names
        self.column2_names = column2_names

    def create_groups(self):
        random.shuffle(self.column1_names)
        random.shuffle(self.column2_names)
        min_length = min(len(self.column1_names), len(self.column2_names))
        groups = [(self.column1_names[i], self.column2_names[i]) for i in range(min_length)]
        return groups

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Name Group Randomizer")
        self.geometry("450x500")

        self.column1_names = self.load_names_from_file("column1_names.txt")
        self.column2_names = self.load_names_from_file("column2_names.txt")
        self.groups = self.load_groups_from_file()

        # Create a main frame for organizing the layout
        self.main_frame = tk.Frame(self)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Frame for Column 1
        self.column1_frame = tk.Frame(self.main_frame)
        self.column1_frame.grid(row=0, column=0, padx=10)

        self.label1 = tk.Label(self.column1_frame, text="Column 1:")
        self.label1.pack(pady=5)

        self.entry_name1 = tk.Entry(self.column1_frame, width=30)
        self.entry_name1.pack(pady=5)

        self.add_button1 = tk.Button(self.column1_frame, text="Add Name", command=self.add_name1)
        self.add_button1.pack(pady=5)

        self.names_listbox1 = tk.Listbox(self.column1_frame)
        self.names_listbox1.pack(pady=5)
        self.update_listbox1()

        self.delete_button1 = tk.Button(self.column1_frame, text="Delete Selected Name", command=self.delete_name1)
        self.delete_button1.pack(pady=5)

        # Frame for Column 2
        self.column2_frame = tk.Frame(self.main_frame)
        self.column2_frame.grid(row=0, column=1, padx=10)

        self.label2 = tk.Label(self.column2_frame, text="Column 2:")
        self.label2.pack(pady=5)

        self.entry_name2 = tk.Entry(self.column2_frame, width=30)
        self.entry_name2.pack(pady=5)

        self.add_button2 = tk.Button(self.column2_frame, text="Add Name", command=self.add_name2)
        self.add_button2.pack(pady=5)

        self.names_listbox2 = tk.Listbox(self.column2_frame)
        self.names_listbox2.pack(pady=5)
        self.update_listbox2()

        self.delete_button2 = tk.Button(self.column2_frame, text="Delete Selected Name", command=self.delete_name2)
        self.delete_button2.pack(pady=5)

        # Group Management
        self.create_groups_button = tk.Button(self.main_frame, text="Create Groups", command=self.create_groups)
        self.create_groups_button.grid(row=1, column=0, columnspan=2, pady=10)

        self.show_groups_button = tk.Button(self.main_frame, text="Show Last Groups", command=self.show_groups)
        self.show_groups_button.grid(row=2, column=0, columnspan=2, pady=10)


    def add_name1(self):
        name = self.entry_name1.get()
        if name:
            self.column1_names.append(name)
            self.update_listbox1()
            self.entry_name1.delete(0, tk.END)
            self.save_names_to_file(self.column1_names, "column1_names.txt")

    def delete_name1(self):
        selected_index = self.names_listbox1.curselection()
        if selected_index:
            self.column1_names.pop(selected_index[0])
            self.update_listbox1()
            self.save_names_to_file(self.column1_names, "column1_names.txt")

    def update_listbox1(self):
        self.names_listbox1.delete(0, tk.END)
        for name in self.column1_names:
            self.names_listbox1.insert(tk.END, name)

    def add_name2(self):
        name = self.entry_name2.get()
        if name:
            self.column2_names.append(name)
            self.update_listbox2()
            self.entry_name2.delete(0, tk.END)
            self.save_names_to_file(self.column2_names, "column2_names.txt")

    def delete_name2(self):
        selected_index = self.names_listbox2.curselection()
        if selected_index:
            self.column2_names.pop(selected_index[0])
            self.update_listbox2()
            self.save_names_to_file(self.column2_names, "column2_names.txt")

    def update_listbox2(self):
        self.names_listbox2.delete(0, tk.END)
        for name in self.column2_names:
            self.names_listbox2.insert(tk.END, name)

    def save_names_to_file(self, names, filename):
        folder_path = "name_group_data"
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
        file_path = os.path.join(folder_path, filename)
        with open(file_path, "w") as file:
            for name in names:
                file.write(f"{name}\n")

    def load_names_from_file(self, filename):
        folder_path = "name_group_data"
        file_path = os.path.join(folder_path, filename)
        if os.path.exists(file_path):
            with open(file_path, "r") as file:
                names = file.read().splitlines()
            return names
        return []

    def save_groups_to_file(self, groups):
        folder_path = "name_group_data"
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
        file_path = os.path.join(folder_path, "groups.txt")
        with open(file_path, "w") as file:
            for group in groups:
                file.write(f"Group: {group[0]}, {group[1]}\n")

    def load_groups_from_file(self):
        folder_path = "name_group_data"
        file_path = os.path.join(folder_path, "groups.txt")
        if os.path.exists(file_path):
            with open(file_path, "r") as file:
                groups = file.read().splitlines()
            return groups
        return []

    def create_groups(self):
        if not self.column1_names or not self.column2_names:
            messagebox.showerror("No names", "Please add some names to both columns first.")
            return

        randomizer = NameGroupRandomizer(self.column1_names, self.column2_names)
        groups = randomizer.create_groups()
        self.save_groups_to_file(groups)

        group_text = ""
        for group in groups:
            group_text += f"Group: {group[0]}, {group[1]}\n"

        messagebox.showinfo("Groups", group_text)

    def show_groups(self):
        if not self.groups:
            messagebox.showinfo("No groups", "No groups to display.")
            return

        group_text = "\n".join(self.groups)
        messagebox.showinfo("Last Groups", group_text)

if __name__ == "__main__":
    app = Application()
    app.mainloop()